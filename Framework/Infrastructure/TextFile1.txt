namespace Ipreo.Retail.Automation.Framework.Core.UI.Elements.Base
{
    using AutomationFramework.UI.Components.Factory;
    using Dependency.Manager;
    using Framework.UI.Driver;
    using Framework.UI.Elements.Base;
    using Framework.UI.Elements.Standard.Table;
    using OpenQA.Selenium;
    using OpenQA.Selenium.Interactions;
    using System.Collections.Generic;
    using Driver = Driver.Driver;

    [BuildBy(typeof(ElementBuilder))]
    public class Element : AutomationFramework.UI.Components.Element, IElement
    {
        protected static Driver Driver
            => DependencyManager.Get<IDriver>() as Driver;

        protected string Id
            => GetAttribute("Id");

        protected IWebElement WebElement
            => ElementDecorator.Eval<IWebElement, IWebElement>(e => e);

        internal string ValueAttribute
            => WebElement.GetAttribute("value");

        public string Name { get; set; }

        public string Text
            => WebElement.Text;

        public string Source
            => JScript(".innerHTML").ToString();

        public new bool Displayed
            => base.Displayed && GetAttribute("class")?.Contains("ng-hide") != true;

        public new virtual bool Enabled
            => GetAttribute("disabled") == null && GetAttribute("readonly") == null;

        public override void Click()
            => Script
                (@"
                    var element = arguments[0]
                    setTimeout(
                        function()
                        {
                            element.click()
                        }, 0)
                ", WebElement);

        public void Hover()
            => new Actions(Driver.WebDriver).MoveToElement(WebElement).Perform();

        public T Get<T>(string method, string expression, string name = "Some element") where T : IElement
            => this.Find<T>(method, expression, name);

        public T TryGet<T>(string method, string expression, string name = "Some element") where T : IElement
            => this.TryFind<T>(method, expression, name);

        public IEnumerable<T> GetAll<T>(string method, string expression) where T : IElement
            => this.FindAll<T>(method, expression);

        public ICell GetByLabel(string label, int index = 1)
            => this.FindByLabel(label, index);

        public T GetByLabel<T>(string label, int cellIndex = 1, int setableIndex = 1) where T : ISetable
            => GetByLabel(label, cellIndex).GetSetable<T>(setableIndex);

        public void HighLight()
            => JScript(".setAttribute('style', 'border: 5px solid red')");

        protected object JScript(string script, params object[] arguments)
            => Script("return arguments[0]" + script, WebElement, arguments);

        protected object JQScript(string script, params object[] arguments)
            => Script("return $(arguments[0])" + script, WebElement, arguments);

        object Script(string script, params object[] arguments)
            => Driver?.JScript(script, arguments);

        public void Blur() 
            => JQScript(".blur()");
    }
}



namespace Ipreo.Retail.Automation.Framework.Core.UI.Elements.Base
{
    using System.Collections.Generic;
    using System.Linq;
    using AutomationFramework.UI.Components;
    using AutomationFramework.UI.Components.Search;
    using Dependency.Manager;
    using Framework.UI.Elements.Standard.Table;
    using Framework.UI.Locator;
    using IElement = Framework.UI.Elements.Base.IElement;
    using IFrameworkElement = AutomationFramework.UI.Components.IElement;

    static class ElementExtensions
    {
        public static ElementType Find<ElementType>
        (
            this IFrameworkElement parentElement,
            string method,
            string expression,
            string name = "Some element"
        ) where ElementType : IElement
        {
            var element = (ElementType)GenericInvoke<ElementType>(nameof(IElementExtensions.Find), parentElement, method, expression);
            element.Name = name;
            return element;
        }

        public static IEnumerable<ElementType> FindAll<ElementType>
        (
            this IFrameworkElement parentElement,
            string method,
            string expression
        ) where ElementType : IElement
            => IContainSearchConfigurationExtensions
                .FindBy((dynamic)GenericInvoke<ElementType>(nameof(IElementExtensions.FindAll), parentElement), method, expression);

        public static ElementType TryFind<ElementType>
        (
            this IFrameworkElement parentElement,
            string method,
            string expression,
            string name = "Some element"
        ) where ElementType : IElement
            => FindAll<ElementType>(parentElement, method, expression).FirstOrDefault();

        public static ICell FindByLabel
        (
            this IFrameworkElement parentElement,
            string label,
            int index = 1
        )
            => parentElement.Find<ICell>(Methods.XPath,
                $"(.//td[.//descendant-or-self::*[normalize-space(text())='{label}']]/following-sibling::td | " +
                $".//*[text()[normalize-space() = '{label}']]/following-sibling::td | " +
                $".//*[@id=//label[normalize-space(text())='{label}']/@for])[{index}]", label);

        static object GenericInvoke<Type>(string methodName, params object[] parameters)
            => typeof(IElementExtensions).GetMethods()
                .FirstOrDefault(method => method.Name.Equals(methodName) && 
                                          method.GetParameters().Length == parameters.Length)?
                .MakeGenericMethod(DependencyManager.Get(typeof(Type)))
                .Invoke(null, parameters);
    }
}
namespace Ipreo.Retail.Automation.Framework.UI.Elements.Standard
{
    using Base;
    public interface IButton : IElement { }
}




namespace Ipreo.Retail.Automation.Framework.UI.Elements.Base
{
    using Standard.Table;
    using System.Collections.Generic;

    public interface IElement
    {
        bool Displayed { get; }

        bool Enabled { get; }

        bool Exists { get; }

        string Text { get; }

        string Source { get; }

        string Name { get; set; }

        void Click();

        void Hover();

        string GetAttribute(string attribute);
        
        T Get<T>(string method, string expression, string name = "Some element") where T : IElement;

        T TryGet<T>(string method, string expression, string name = "Some element") where T : IElement;

        IEnumerable<T> GetAll<T>(string method, string expression) where T : IElement;

        ICell GetByLabel(string label, int index = 1);

        T GetByLabel<T>(string label, int cellIndex = 1, int setableIndex = 1) where T : ISetable;

        void HighLight();

        void Blur();
    }
}



